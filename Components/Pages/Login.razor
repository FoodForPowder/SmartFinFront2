@page "/login"
@rendermode InteractiveServer
@using SmartFinFront.Models
@using SmartFinFront.Services
@inject AuthService _authService;
@inject NavigationManager NavigationManager
<style>
    .btn {
        border-radius: 25px;
        box-shadow: 0px 2px 8px 0px rgba(0, 0, 0, 0.4);
        padding: 12px 24px;
        font-size: 20px;
        font-weight: 700;
        line-height: 39.01px;
    }
    .form{
        display:flex;
        flex-direction: column;
        gap:10px;
    }
</style>
<div class="content">

    <div class="title-with-logo">
            <MudText Class="h1">SmartFin</MudText>
        <div class="logo-large">
                <img src="/svg/Logo.svg" alt="Logo" />
            </div>
        </div>       
    <div class="subtitle">Вход в системму</div>
    <MudForm @ref = "form" @bind-IsValid="@succes" Class="form">
        <MudTextField T="string" @bind-Value="@model.email" InputType="InputType.Email" Label="Email" Required="true" RequiredError="Email обязателен"></MudTextField>
        <MudTextField T="string" @bind-Value="@model.password" InputType="InputType.Password" Label="Пароль" Required="true" RequiredError="Пароль обязателен"></MudTextField>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudText Color="Color.Error">@errorMessage</MudText>
        }
        <MudButton OnClick="@(async () => await UserLogin())" Class="btn">Войти</MudButton>
    </MudForm>

</div>

@code {
    MudForm form;
    LoginModel model = new();
    bool succes;
    string errorMessage = string.Empty;

    async Task UserLogin()
    {
        UserAuthInfo response = await _authService.Login(model.email, model.password);
        if(response == null)
        {
            errorMessage = "*Неправильный email или пароль!";
        }
        else
        {
            NavigationManager.NavigateTo($"/user/{response.userId}");
        }

    }


}
