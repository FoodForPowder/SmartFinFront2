@using SmartFinFront.Models
@using SmartFinFront.Services
@using SmartFinFront.Components.Dialogs
@inject ISnackbar Snackbar;
@inject GoalService _goalService;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject UserService _userService
@rendermode InteractiveServer
<MudCard Class="mb-4" Elevation="0">
    <MudCardContent>
        <div class="d-flex justify-space-between align-center mb-2">
            @if (!isEditing)
            {
                <MudText Typo="Typo.h6">
                    @goal.name
                </MudText>
            }
            else
            {
                <MudTextField T="string" @bind-Value="@goal.name" Immediate="true" />
            }
            <div>
                <MudIconButton Icon="@Icons.Material.Outlined.Add" Size="Size.Small"
                OnClick="@(async () => await OpenContributionDialog())" />
                <MudIconButton Icon="@Icons.Material.Outlined.Share" Size="Size.Small"
                OnClick="@(async () => await ShareGoal())" />
                @if (!isEditing)
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="Size.Small"
                    OnClick="@(() => isEditing = true)" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Check" Size="Size.Small"
                    OnClick="@(async () => await EditGoal(goal))" />
                }
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="Size.Small"
                OnClick="@(async () => await DeleteGoal(goal))" />
            </div>
        </div>
        <MudGrid>
            <MudItem xs="12" sm="6">
                @if (!isEditing)
                {
                    <MudText Typo="Typo.body2">
                        @goal.description
                    </MudText>
                }
                else
                {
                    <MudTextField T="string" @bind-Value="@goal.description" Immediate="true" />
                }
            </MudItem>
            <MudItem xs="12" sm="3">
                @if (!isEditing)
                {
                    <MudText Typo="Typo.body2">Начало: @goal.dateOfStart.Value.ToShortDateString()</MudText>
                    <MudText Typo="Typo.body2">
                        Окончание: @goal.dateOfEnd.Value.ToShortDateString()
                    </MudText>
                }
                else
                {
                    <MudTextField T="DateTime ?" @bind-Value="@goal.dateOfStart" Immediate="true" />
                    <MudTextField T="DateTime ?" @bind-Value="@goal.dateOfEnd" Immediate="true" />
                }
            </MudItem>
            <MudItem xs="12" sm="3">
                @if (!isEditing)
                {
                    <MudText Typo="Typo.body2" Align="Align.Right">
                        @goal.currentSum.ToString("C")/@goal.plannedSum.ToString("C")
                    </MudText>
                }
                else
                {
                    <MudTextField T="decimal" @bind-Value="@goal.plannedSum" Immediate="true" />
                }
                <MudText Typo="Typo.body2" Align="Align.Right" Color="@GetStatusColor(goal.status)">@goal.status
                </MudText>
            </MudItem>
        </MudGrid>
        <MudProgressLinear Color="@GetProgressColor(goal.currentSum, goal.plannedSum)"
        Value="@((float)(goal.currentSum / goal.plannedSum * 100))" Class="my-2">

        </MudProgressLinear>
        <MudText Typo="Typo.subtitle2">Последний взнос: @goal.lastContributionDate.ToShortDateString() -
            @goal.lastMonthContribution.ToString("C")</MudText>
        <MudText Typo="Typo.subtitle2">Ежемесячный взнос: @goal.payment.ToString("C")</MudText>

        @if (participants.Count > 1)
        {
            <MudDivider Class="my-2" />
            <MudText Typo="Typo.subtitle2">Участники:</MudText>
            <MudList T="User" Dense="true">
                @foreach (var participant in participants)
                {
                    <MudListItem T="User">
                        <MudText Typo="Typo.body2">@participant.Name</MudText>
                    </MudListItem>
                }
            </MudList>
        }
    </MudCardContent>
</MudCard>
@code {
    [Parameter]
    public Goal goal { get; set; }
    [Parameter]
    public int UserId { get; set; } // Добавляем параметр для ID пользователя
    [Parameter] public EventCallback<Goal> OnGoalUpdated { get; set; }
    [Parameter] public EventCallback<Goal> OnGoalDeleted { get; set; }
    bool isEditing;

    private List<User> participants = new();

    protected override async Task OnInitializedAsync()
    {
        if (goal.UserId != null && goal.UserId.Count > 1)
        {
            participants = new List<User>();
            foreach (var userId in goal.UserId)
            {
                try
                {
                    var user = await _userService.GetUser(userId);
                    if (user != null)
                    {
                        participants.Add(user);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ошибка при получении информации о пользователе {userId}: {ex.Message}");
                }
            }
        }
    }

    private Color GetStatusColor(string status) => status switch
    {
        "В процессе" => Color.Info,
        "Завершено" => Color.Success,
        _ => Color.Default
    };

    private Color GetProgressColor(decimal current, decimal planned)
    {
        decimal percentage = 0;
        try
        {
            percentage = current / planned;
        }
        catch (DivideByZeroException ex)
        {
            percentage = 0;
        }
        return percentage switch
        {
            var p when p >= 0.9m => Color.Success,
            var p when p >= 0.6m => Color.Info,
            var p when p >= 0.3m => Color.Warning,
            _ => Color.Error
        };
    }

    private async Task EditGoal(Goal goal)
    {
        goal.UserId = new List<int> { UserId }; // Устанавливаем UserId перед обновлением
        await OnGoalUpdated.InvokeAsync(goal);
        isEditing = false;
    }

    private async Task ContributeGoal(decimal amount)
    {
        try
        {
            await _goalService.ContributeToGoalAsync(goal.id, amount, UserId); // Используем UserId
            goal = await _goalService.GetUsersGoalById(goal.id, UserId); // Используем UserId
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message);
        }
    }
    private async Task OpenContributionDialog()
    {
        var dialog = await DialogService.ShowAsync<ContributeGoalDialog>("Внести платеж", new
        DialogParameters<ContributeGoalDialog>() { { x => x.amount, goal.payment } }, new DialogOptions()
        {
            MaxWidth =
        MaxWidth.Medium,
            CloseButton = true,
            Position = DialogPosition.Center
        });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ContributeGoal((decimal)result.Data);
        }
    }

    private async Task DeleteGoal(Goal goal)
    {
        goal.UserId = new List<int> { UserId }; // Устанавливаем UserId перед удалением
        await OnGoalDeleted.InvokeAsync(goal);
    }

    private async Task ShareGoal()
    {
        try
        {
            // Получаем ссылку-приглашение от сервера
            var inviteLink = await _goalService.GenerateInviteLink(goal.id);
            var baseUrl = NavigationManager.BaseUri.TrimEnd('/');
            // Копируем ссылку в буфер обмена
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", baseUrl + inviteLink);
            Snackbar.Add("Ссылка-приглашение скопирована в буфер обмена", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Ошибка при создании ссылки-приглашения", Severity.Error);
            Console.WriteLine($"Ошибка при создании ссылки-приглашения: {ex.Message}");
        }
    }
}